import{_ as t,c as l,o as I,ak as e}from"./chunks/framework.CVFSIJ6L.js";const C=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"guide/data-types.md","filePath":"guide/data-types.md"}'),o={name:"guide/data-types.md"};function n(g,a,i,d,s,c){return I(),l("div",null,a[0]||(a[0]=[e(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p>在 JavaScript 中，我们有基本类型（<code>number</code>、<code>string</code>、<code>boolean</code>、<code>undefined</code>、<code>null</code>、<code>symbol</code>）和引用类型（<code>object</code>，包括数组、函数等）。Python 也有数据类型的概念，但分类方式和 JavaScript 不同，更加细致和清晰。</p><h2 id="对比-javascript" tabindex="-1">对比 JavaScript <a class="header-anchor" href="#对比-javascript" aria-label="Permalink to &quot;对比 JavaScript&quot;">​</a></h2><p>Python 和 JavaScript 在类型系统设计上有重要差异：</p><p><strong>JavaScript 的类型系统</strong>：</p><ul><li>分为<strong>基础类型</strong>（number, string, boolean, null, undefined）和<strong>引用类型</strong>（object, array, function）</li><li>基础类型按值传递，引用类型按引用传递</li><li>有很多隐式类型转换，有时会产生意外结果</li></ul><p><strong>Python 的类型系统</strong>：</p><ul><li><strong>所有数据都是对象</strong>，没有基础类型和引用类型的区别</li><li>更重要的是 <strong>可变（mutable）</strong> 和 <strong>不可变（immutable）</strong> 的区别</li><li>很少有隐式转换，大多需要显式转换，更加安全可预测</li></ul><h2 id="可变性-python-的核心概念" tabindex="-1">可变性：Python 的核心概念 <a class="header-anchor" href="#可变性-python-的核心概念" aria-label="Permalink to &quot;可变性：Python 的核心概念&quot;">​</a></h2><p>Python 中，数据类型按可变性分为两大类：</p><p><strong>不可变类型（Immutable）</strong>：</p><ul><li>一旦创建，内容不能修改</li><li>包括：<code>int</code>、<code>float</code>、<code>str</code>、<code>bool</code>、<code>tuple</code>、<code>frozenset</code></li><li>类似于 JavaScript 中的字符串，修改时会创建新对象</li></ul><p><strong>可变类型（Mutable）</strong>：</p><ul><li>创建后可修改内容</li><li>包括：<code>list</code>、<code>dict</code>、<code>set</code></li><li>类似于 JavaScript 中的数组和对象</li></ul><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDkuI3lj6/lj5jnsbvlnovnpLrkvosKbmFtZSA9ICJBbGljZSIKb3JpZ2luYWxfbmFtZSA9IG5hbWUKbmFtZSA9IG5hbWUgKyAiIFNtaXRoIiAgIyDliJvlu7rkuobmlrDlrZfnrKbkuLLlr7nosaEKcHJpbnQoZiLljp/lp4vlgLw6IHtvcmlnaW5hbF9uYW1lfSIpICAjIEFsaWNlCnByaW50KGYi5L+u5pS55ZCOOiB7bmFtZX0iKSAgICAgICAgICAgIyBBbGljZSBTbWl0aAoKIyDlj6/lj5jnsbvlnovnpLrkvosgIApmcmllbmRzID0gWyJCb2IiLCAiQ2hhcmxpZSJdCm9yaWdpbmFsX2ZyaWVuZHMgPSBmcmllbmRzCmZyaWVuZHMuYXBwZW5kKCJEYXZlIikgICMg5L+u5pS55Y6f5a+56LGhCnByaW50KGYi5Y6f5aeL5byV55SoOiB7b3JpZ2luYWxfZnJpZW5kc30iKSAgIyBbJ0JvYicsICdDaGFybGllJywgJ0RhdmUnXQpwcmludChmIuW9k+WJjeWAvDoge2ZyaWVuZHN9IikgICAgICAgICAgICAjIFsnQm9iJywgJ0NoYXJsaWUnLCAnRGF2ZSddCg==" data-runnable="true"></div><h2 id="内置数据类型" tabindex="-1">内置数据类型 <a class="header-anchor" href="#内置数据类型" aria-label="Permalink to &quot;内置数据类型&quot;">​</a></h2><p>Python 默认包含以下几类数据类型：</p><table tabindex="0"><thead><tr><th>类型分类</th><th>数据类型</th><th>可变性</th></tr></thead><tbody><tr><td>文本类型</td><td><code>str</code></td><td>不可变</td></tr><tr><td>数值类型</td><td><code>int</code>, <code>float</code>, <code>complex</code></td><td>不可变</td></tr><tr><td>序列类型</td><td><code>list</code>, <code>tuple</code>, <code>range</code></td><td>list 可变，其他不可变</td></tr><tr><td>映射类型</td><td><code>dict</code></td><td>可变</td></tr><tr><td>集合类型</td><td><code>set</code>, <code>frozenset</code></td><td>set 可变，frozenset 不可变</td></tr><tr><td>布尔类型</td><td><code>bool</code></td><td>不可变</td></tr><tr><td>二进制类型</td><td><code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></td><td>bytes 不可变，其他可变</td></tr><tr><td>空值类型</td><td><code>NoneType</code></td><td>不可变</td></tr></tbody></table><h2 id="获取数据类型" tabindex="-1">获取数据类型 <a class="header-anchor" href="#获取数据类型" aria-label="Permalink to &quot;获取数据类型&quot;">​</a></h2><p>就像 JavaScript 中使用<code>typeof</code>一样，Python 使用<code>type()</code>函数来查看数据类型：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDojrflj5blj5jph4/nmoTmlbDmja7nsbvlnosKeCA9IDUKcHJpbnQodHlwZSh4KSkgICAgICAgICAgICMgPGNsYXNzICdpbnQnPgoKeSA9ICJIZWxsbyBXb3JsZCIKcHJpbnQodHlwZSh5KSkgICAgICAgICAgICMgPGNsYXNzICdzdHInPgoKeiA9IFsxLCAyLCAzXQpwcmludCh0eXBlKHopKSAgICAgICAgICAgIyA8Y2xhc3MgJ2xpc3QnPgo=" data-runnable="true"></div><h2 id="数据类型的自动识别" tabindex="-1">数据类型的自动识别 <a class="header-anchor" href="#数据类型的自动识别" aria-label="Permalink to &quot;数据类型的自动识别&quot;">​</a></h2><p>在 JavaScript 中，变量的类型是在赋值时确定的，Python 也是如此：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g5Lya5qC55o2u6LWL5YC86Ieq5Yqo56Gu5a6a5pWw5o2u57G75Z6LCnggPSAiSGVsbG8gV29ybGQiICAgICAgICAjIHN0cgp5ID0gMjAgICAgICAgICAgICAgICAgICAgIyBpbnQgIAp6ID0gMjAuNSAgICAgICAgICAgICAgICAgIyBmbG9hdAphID0gMWogICAgICAgICAgICAgICAgICAgIyBjb21wbGV4CmIgPSBbImFwcGxlIiwgImJhbmFuYSJdICAjIGxpc3QKYyA9ICgiYXBwbGUiLCAiYmFuYW5hIikgICMgdHVwbGUKZCA9IHJhbmdlKDYpICAgICAgICAgICAgICMgcmFuZ2UKZSA9IHsibmFtZSI6ICJKb2huIn0gICAgICMgZGljdApmID0geyJhcHBsZSIsICJiYW5hbmEifSAgIyBzZXQKZyA9IFRydWUgICAgICAgICAgICAgICAgICMgYm9vbApoID0gYiJIZWxsbyIgICAgICAgICAgICAgIyBieXRlcwppID0gTm9uZSAgICAgICAgICAgICAgICAgIyBOb25lVHlwZQoKIyDmn6XnnIvlkITnp43nsbvlnosKdmFyaWFibGVzID0gW3gsIHksIHosIGEsIGIsIGMsIGQsIGUsIGYsIGcsIGgsIGldCmZvciB2YXIgaW4gdmFyaWFibGVzOgogICAgcHJpbnQoZiJ7cmVwcih2YXIpOj4yMH0gLT4ge3R5cGUodmFyKS5fX25hbWVfX30iKQo=" data-runnable="true"></div><h2 id="显式指定数据类型" tabindex="-1">显式指定数据类型 <a class="header-anchor" href="#显式指定数据类型" aria-label="Permalink to &quot;显式指定数据类型&quot;">​</a></h2><p>有时我们想要明确指定变量的数据类型，可以使用构造函数：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDkvb/nlKjmnoTpgKDlh73mlbDmmL7lvI/liJvlu7rnibnlrprnsbvlnosKeCA9IHN0cigiSGVsbG8gV29ybGQiKSAgICAgICAjIOW8uuWItui9rOS4uuWtl+espuS4sgp5ID0gaW50KDIwKSAgICAgICAgICAgICAgICAgICMg5by65Yi26L2s5Li65pW05pWwCnogPSBmbG9hdCgyMC41KSAgICAgICAgICAgICAgIyDlvLrliLbovazkuLrmta7ngrnmlbAKYSA9IGNvbXBsZXgoMWopICAgICAgICAgICAgICAjIOWIm+W7uuWkjeaVsApiID0gbGlzdCgoImFwcGxlIiwgImJhbmFuYSIpKSAjIOWIm+W7uuWIl+ihqApjID0gdHVwbGUoKCJhcHBsZSIsICJiYW5hbmEiKSkgIyDliJvlu7rlhYPnu4QKZCA9IHJhbmdlKDYpICAgICAgICAgICAgICAgICAjIOWIm+W7uuiMg+WbtOWvueixoQplID0gZGljdChuYW1lPSJKb2huIiwgYWdlPTM2KSAjIOWIm+W7uuWtl+WFuApmID0gc2V0KCgiYXBwbGUiLCAiYmFuYW5hIikpICAjIOWIm+W7uumbhuWQiApnID0gYm9vbCg1KSAgICAgICAgICAgICAgICAgICMg6L2s5Li65biD5bCU5YC8CmggPSBieXRlcyg1KSAgICAgICAgICAgICAgICAgIyDliJvlu7rlrZfoioLlr7nosaEKCnByaW50KGYic3RyIOaehOmAoDoge3h9ICh7dHlwZSh4KS5fX25hbWVfX30pIikKcHJpbnQoZiJpbnQg5p6E6YCgOiB7eX0gKHt0eXBlKHkpLl9fbmFtZV9ffSkiKQpwcmludChmImZsb2F0IOaehOmAoDoge3p9ICh7dHlwZSh6KS5fX25hbWVfX30pIikKcHJpbnQoZiJib29sIOaehOmAoDoge2d9ICh7dHlwZShnKS5fX25hbWVfX30pIikK" data-runnable="true"></div><h2 id="类型检查" tabindex="-1">类型检查 <a class="header-anchor" href="#类型检查" aria-label="Permalink to &quot;类型检查&quot;">​</a></h2><p>在实际编程中，我们经常需要检查变量的类型。Python 提供了两种主要方式：<code>type()</code>和<code>isinstance()</code>。推荐使用<code>isinstance()</code>函数，因为它能正确处理继承关系，更加安全可靠。</p><p><code>isinstance()</code>可以检查单一类型，也可以同时检查多种类型，非常灵活：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBpc2luc3RhbmNlKCkgLSDmjqjojZDnmoTnsbvlnovmo4Dmn6XmlrnlvI8KbnVtYmVyID0gNDIKdGV4dCA9ICJoZWxsbyIKaXRlbXMgPSBbMSwgMiwgM10KCiMg5qOA5p+l5Y2V5LiA57G75Z6LCnByaW50KGYibnVtYmVyIOaYr+aVtOaVsOWQlz8ge2lzaW5zdGFuY2UobnVtYmVyLCBpbnQpfSIpCnByaW50KGYidGV4dCDmmK/lrZfnrKbkuLLlkJc/IHtpc2luc3RhbmNlKHRleHQsIHN0cil9IikKCiMg5qOA5p+l5aSa56eN57G75Z6LCnByaW50KGYibnVtYmVyIOaYr+aVsOWAvOexu+Wei+WQlz8ge2lzaW5zdGFuY2UobnVtYmVyLCAoaW50LCBmbG9hdCkpfSIpCg==" data-runnable="true"></div><p>检查<code>None</code>值有特殊的语法。JavaScript 中我们用<code>=== null</code>，Python 中应该使用<code>is None</code>：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDmo4Dmn6UgTm9uZSDlgLwgLSDkvb/nlKggaXMg6ICM5LiN5pivPT0KZW1wdHlfdmFsdWUgPSBOb25lCm51bWJlciA9IDQyCgpwcmludChmImVtcHR5X3ZhbHVlIOaYryBOb25lIOWQlz8ge2VtcHR5X3ZhbHVlIGlzIE5vbmV9IikgICAgICAjIOaOqOiNkOWGmeazlQpwcmludChmIm51bWJlciDkuI3mmK8gTm9uZSDlkJc/IHtudW1iZXIgaXMgbm90IE5vbmV9IikgICAgICAgICAgIyDmjqjojZDlhpnms5UKcHJpbnQoZiLnlKg9PeajgOafpSBOb25lOiB7ZW1wdHlfdmFsdWUgPT0gTm9uZX0iKSAgICAgICAgICAgICAgIyDkuI3mjqjojZDvvIzkvYbog73lt6XkvZwKCiMg5Li65LuA5LmI6KaB55SoIGlz77yf5Zug5Li6IE5vbmUg5piv5Y2V5L6L5a+56LGhCnByaW50KGYiTm9uZSDnmoQgaWQ6IHtpZChOb25lKX0iKQpwcmludChmIuWPpuS4gOS4qiBOb25lIOeahCBpZDoge2lkKE5vbmUpfSIpICAjIOaAu+aYr+ebuOWQjOeahCBpZAo=" data-runnable="true"></div><p><code>isinstance()</code>相比<code>type()</code>的优势在于能正确处理继承关系：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBpc2luc3RhbmNlIHZzIHR5cGUg55qE5Yy65YirCmNsYXNzIE15TGlzdChsaXN0KToKICAgIHBhc3MKCm15X2xpc3QgPSBNeUxpc3QoWzEsIDIsIDNdKQpwcmludChmInR5cGUobXlfbGlzdCkgPT0gbGlzdDoge3R5cGUobXlfbGlzdCkgPT0gbGlzdH0iKSAgICAgICAgIyBGYWxzZQpwcmludChmImlzaW5zdGFuY2UobXlfbGlzdCwgbGlzdCk6IHtpc2luc3RhbmNlKG15X2xpc3QsIGxpc3QpfSIpICAjIFRydWUgKOaOqOiNkCkK" data-runnable="true"></div><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>与 JavaScript 的隐式转换不同，Python 主要依赖显式转换，这让代码更加安全和可预测。JavaScript 中经常出现的<code>&quot;5&quot; + 3 = &quot;53&quot;</code>这样的意外结果，在 Python 中需要明确指定转换方式：</p><div class="interactive-code-block" data-lang="js" data-title="" data-code="Ly8gSmF2YVNjcmlwdCDnmoTpmpDlvI/ovazmjaLvvIjmnInml7bku6Tkurrlm7Dmg5HvvIkKY29uc29sZS5sb2coIjUiICsgMyk7ICAgIC8vICI1MyIg5a2X56ym5Liy5ou85o6lCmNvbnNvbGUubG9nKCI1IiAtIDMpOyAgICAvLyAyICAg5pWw5YC86L+Q566XCmNvbnNvbGUubG9nKDUgKyB0cnVlKTsgICAvLyA2ICAgdHJ1ZSDovazkuLogMQo=" data-runnable="true"></div><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g55qE5pi+5byP6L2s5o2i77yI5pu05riF5pmw77yJCiMg5a2X56ym5Liy6L2s5pWw5a2XCm51bV9zdHIgPSAiMTIzIgpudW0gPSBpbnQobnVtX3N0cikKcHJpbnQoZiIne251bV9zdHJ9JyAtPiB7bnVtfSAoe3R5cGUobnVtKS5fX25hbWVfX30pIikKCiMg5pWw5a2X6L2s5a2X56ym5LiyCm51bWJlciA9IDQ1Ngp0ZXh0ID0gc3RyKG51bWJlcikKcHJpbnQoZiJ7bnVtYmVyfSAtPiAne3RleHR9JyAoe3R5cGUodGV4dCkuX19uYW1lX199KSIpCgojIOWIl+ihqOi9rOWFg+e7hApteV9saXN0ID0gWzEsIDIsIDNdCm15X3R1cGxlID0gdHVwbGUobXlfbGlzdCkKcHJpbnQoZiJ7bXlfbGlzdH0gLT4ge215X3R1cGxlfSAoe3R5cGUobXlfdHVwbGUpLl9fbmFtZV9ffSkiKQoKIyDluIPlsJTovazmjaIKcHJpbnQoZiJib29sKDEpOiB7Ym9vbCgxKX0iKSAgICAgICMgVHJ1ZQpwcmludChmImJvb2woMCk6IHtib29sKDApfSIpICAgICAgIyBGYWxzZSAgCnByaW50KGYiYm9vbCgnJyk6IHtib29sKCcnKX0iKSAgICAjIEZhbHNlICjnqbrlrZfnrKbkuLIpCnByaW50KGYiYm9vbChbXSk6IHtib29sKFtdKX0iKSAgICAjIEZhbHNlICjnqbrliJfooagpCg==" data-runnable="true"></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>Python 的数据类型体系与 JavaScript 有显著差异，主要体现在：</p><ol><li><strong>类型系统差异</strong>：Python 中所有数据都是对象，更关注可变性而非基础类型 vs 引用类型</li><li><strong>可变性概念</strong>：不可变类型（int、str、tuple 等）创建后不可修改，可变类型（list、dict、set 等）可以修改内容</li><li><strong>类型识别</strong>：<code>type()</code>函数查看类型，<code>isinstance()</code>函数进行类型检查（推荐）</li><li><strong>显式转换</strong>：Python 避免隐式转换，通过构造函数进行明确的类型转换</li><li><strong>更细致的分类</strong>：数值类型分为 int、float、complex，序列类型包含 list、tuple、range 等</li><li><strong>内置集合支持</strong>：set 和 frozenset 提供高效的集合操作</li><li><strong>类型安全</strong>：较少的隐式转换规则让代码行为更可预测</li></ol><p>理解这些概念，特别是可变性和类型检查，是掌握 Python 编程的重要基础。在后续章节中，我们将深入学习每种具体类型的用法和特性。</p><h2 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h2><p>分析不同数据类型，输出详细的类型信息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=== 数据类型分析 ===</span></span>
<span class="line"><span>整数 42: &lt;class &#39;int&#39;&gt; (不可变)</span></span>
<span class="line"><span>浮点数 3.14: &lt;class &#39;float&#39;&gt; (不可变)  </span></span>
<span class="line"><span>字符串 &quot;Python&quot;: &lt;class &#39;str&#39;&gt; (不可变)</span></span>
<span class="line"><span>列表 [1, 2, 3]: &lt;class &#39;list&#39;&gt; (可变)</span></span>
<span class="line"><span>元组 (1, 2, 3): &lt;class &#39;tuple&#39;&gt; (不可变)</span></span>
<span class="line"><span>字典 {&#39;a&#39;: 1}: &lt;class &#39;dict&#39;&gt; (可变)</span></span>
<span class="line"><span>=== 类型检查 ===</span></span>
<span class="line"><span>42 是数值类型: True</span></span>
<span class="line"><span>&quot;Python&quot; 是字符串: True</span></span>
<span class="line"><span>None 值检查: True</span></span>
<span class="line"><span>=== 类型转换 ===</span></span>
<span class="line"><span>&quot;123&quot; -&gt; 123 (str to int)</span></span>
<span class="line"><span>3.14 -&gt; &quot;3.14&quot; (float to str)</span></span>
<span class="line"><span>[1, 2] -&gt; (1, 2) (list to tuple)</span></span></code></pre></div><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDnu5nlrprmlbDmja7vvJrmlbTmlbA0Miwg5rWu54K55pWwMy4xNCwg5a2X56ym5LiyIlB5dGhvbiIsIOWIl+ihqFsxLDIsM10sIOWFg+e7hCgxLDIsMyksIOWtl+WFuHsnYSc6MX0sIE5vbmXlgLwKCiMgMS4g5Yib5bu65ZCE56eN57G75Z6L55qE5Y+Y6YePCgoKIyAyLiDlrprkuYnlj6/lj5jnsbvlnovlkozkuI3lj6/lj5jnsbvlnovnmoTliJfooagKCgojIDMuIOWIhuaekOavj+S4quWPmOmHj+eahOexu+Wei++8jOWIpOaWreWPr+WPmOaAp+W5tui+k+WHugoKCiMgNC4g5L2/55SoIGlzaW5zdGFuY2UoKSDmo4Dmn6XnsbvlnosKCgojIDUuIOa8lOekuuexu+Wei+i9rOaNogoKCiMgNi4g5qOA5p+lIE5vbmUg5YC8CgoK" data-runnable="true"></div><details class="details custom-block"><summary>点击查看参考答案</summary><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyAxLiDliJvlu7rlkITnp43nsbvlnovnmoTlj5jph48KbnVtX2ludCA9IDQyCm51bV9mbG9hdCA9IDMuMTQKdGV4dCA9ICJQeXRob24iCm15X2xpc3QgPSBbMSwgMiwgM10KbXlfdHVwbGUgPSAoMSwgMiwgMykKbXlfZGljdCA9IHsnYSc6IDF9Cm5vbmVfdmFsdWUgPSBOb25lCgojIDIuIOWumuS5ieWPr+WPmOexu+Wei+WSjOS4jeWPr+WPmOexu+Wei+eahOWIl+ihqAptdXRhYmxlX3R5cGVzID0gKGxpc3QsIGRpY3QsIHNldCkKaW1tdXRhYmxlX3R5cGVzID0gKGludCwgZmxvYXQsIHN0ciwgdHVwbGUsIGJvb2wsIHR5cGUoTm9uZSkpCgojIDMuIOWIhuaekOavj+S4quWPmOmHj+eahOexu+Wei++8jOWIpOaWreWPr+WPmOaAp+W5tui+k+WHugp2YXJpYWJsZXMgPSBbCiAgICAoIuaVtOaVsCA0MiIsIG51bV9pbnQpLAogICAgKCLmta7ngrnmlbAgMy4xNCIsIG51bV9mbG9hdCksIAogICAgKCflrZfnrKbkuLIgIlB5dGhvbiInLCB0ZXh0KSwKICAgICgi5YiX6KGoIFsxLCAyLCAzXSIsIG15X2xpc3QpLAogICAgKCLlhYPnu4QgKDEsIDIsIDMpIiwgbXlfdHVwbGUpLAogICAgKCLlrZflhbggeydhJzogMX0iLCBteV9kaWN0KQpdCgpwcmludCgiPT09IOaVsOaNruexu+Wei+WIhuaekCA9PT0iKQpmb3IgbmFtZSwgdmFyIGluIHZhcmlhYmxlczoKICAgIHZhcl90eXBlID0gdHlwZSh2YXIpCiAgICBpc19tdXRhYmxlID0gaXNpbnN0YW5jZSh2YXIsIG11dGFibGVfdHlwZXMpCiAgICBtdXRhYmlsaXR5ID0gIuWPr+WPmCIgaWYgaXNfbXV0YWJsZSBlbHNlICLkuI3lj6/lj5giCiAgICBwcmludChmIntuYW1lfToge3Zhcl90eXBlfSAoe211dGFiaWxpdHl9KSIpCgojIDQuIOS9v+eUqCBpc2luc3RhbmNlKCkg5qOA5p+l57G75Z6LCnByaW50KCI9PT0g57G75Z6L5qOA5p+lID09PSIpCnByaW50KGYiNDIg5piv5pWw5YC857G75Z6LOiB7aXNpbnN0YW5jZShudW1faW50LCAoaW50LCBmbG9hdCkpfSIpCnByaW50KGYnIlB5dGhvbiIg5piv5a2X56ym5LiyOiB7aXNpbnN0YW5jZSh0ZXh0LCBzdHIpfScpCnByaW50KGYiTm9uZSDlgLzmo4Dmn6U6IHtub25lX3ZhbHVlIGlzIE5vbmV9IikKCiMgNS4g5ryU56S657G75Z6L6L2s5o2iCnByaW50KCI9PT0g57G75Z6L6L2s5o2iID09PSIpCnN0cl9udW0gPSAiMTIzIgpjb252ZXJ0ZWRfaW50ID0gaW50KHN0cl9udW0pCnByaW50KGYnIntzdHJfbnVtfSIgLT4ge2NvbnZlcnRlZF9pbnR9IChzdHIgdG8gaW50KScpCgpjb252ZXJ0ZWRfc3RyID0gc3RyKG51bV9mbG9hdCkKcHJpbnQoZiJ7bnVtX2Zsb2F0fSAtPiBcIntjb252ZXJ0ZWRfc3RyfVwiIChmbG9hdCB0byBzdHIpIikKCmNvbnZlcnRlZF90dXBsZSA9IHR1cGxlKG15X2xpc3RbOjJdKQpwcmludChmIntteV9saXN0WzoyXX0gLT4ge2NvbnZlcnRlZF90dXBsZX0gKGxpc3QgdG8gdHVwbGUpIikK" data-runnable="true"></div></details>`,48)]))}const b=t(o,[["render",n]]);export{C as __pageData,b as default};
