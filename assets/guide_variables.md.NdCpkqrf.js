import{_ as l,c as i,o,ak as I}from"./chunks/framework.CVFSIJ6L.js";const d=JSON.parse('{"title":"变量","description":"","frontmatter":{},"headers":[],"relativePath":"guide/variables.md","filePath":"guide/variables.md"}'),e={name:"guide/variables.md"};function n(t,a,g,s,p,c){return o(),i("div",null,a[0]||(a[0]=[I(`<h1 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h1><p>JavaScript 中使用<code>let</code>、<code>const</code>、<code>var</code>进行明确的变量声明，Python 则追求简洁性，直接赋值即可创建变量。两者都支持动态类型，但在类型安全和命名规范上有不同的设计哲学。</p><h2 id="声明" tabindex="-1">声明 <a class="header-anchor" href="#声明" aria-label="Permalink to &quot;声明&quot;">​</a></h2><p>在 JavaScript 中，我们已经习惯了明确的变量声明语法。现代 JavaScript 通过<code>let</code>、<code>const</code>和<code>var</code>来声明变量，每个关键字都有特定的作用域和行为：</p><div class="interactive-code-block" data-lang="js" data-title="" data-code="dmFyIGdsb2JhbFZhciA9ICLlhajlsYDlj5jph4/vvIjkuI3mjqjojZDvvIkiOwpsZXQgbXV0YWJsZVZhciA9ICLlj6/lj5jlj5jph48iOwpjb25zdCBpbW11dGFibGVWYXIgPSAi5LiN5Y+v5Y+Y5Y+Y6YePIjsKCmNvbnNvbGUubG9nKGdsb2JhbFZhciwgbXV0YWJsZVZhciwgaW1tdXRhYmxlVmFyKTsKCi8vIOWxleekuuWPmOmHj+WPr+WPmOaApwptdXRhYmxlVmFyID0gIumHjeaWsOi1i+WAvCI7CmNvbnNvbGUubG9nKCLkv67mlLnlkI46IiwgbXV0YWJsZVZhcik7CgovLyBjb25zdCDlj5jph4/kuI3og73ph43mlrDotYvlgLwKLy8gaW1tdXRhYmxlVmFyID0gIui/meS8muaKpemUmSI7IC8vIFR5cGVFcnJvcgo=" data-runnable="true"></div><p>JavaScript 的这种设计让我们能清楚地表达变量的可变性意图，特别是<code>const</code>关键字能防止意外的重新赋值。在前端开发中，这种明确的声明方式有助于避免变量作用域相关的 bug。</p><p>Python 采用了截然不同的哲学：<strong>简洁胜过冗余</strong>。在 Python 中，你无需任何声明关键字，直接赋值即可创建变量。这种设计让代码更加简洁直观：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g5Lit55u05o6l6LWL5YC85Y2z5Y+v5Yib5bu65Y+Y6YePCmdsb2JhbF92YXIgPSAi5YWo5bGA5Y+Y6YePIgptdXRhYmxlX3ZhciA9ICLlj6/lj5jlj5jph48iCmltbXV0YWJsZV92YXIgPSAi57qm5a6a5LiN5Y+Y55qE5Y+Y6YePIgoKcHJpbnQoZ2xvYmFsX3ZhciwgbXV0YWJsZV92YXIsIGltbXV0YWJsZV92YXIpCgojIFB5dGhvbiDkuK3nmoTlj5jph4/pu5jorqTpg73mmK/lj6/lj5jnmoQKbXV0YWJsZV92YXIgPSAi6YeN5paw6LWL5YC8IgppbW11dGFibGVfdmFyID0gIuaKgOacr+S4iuS5n+WPr+S7pemHjeaWsOi1i+WAvCIKcHJpbnQoIuS/ruaUueWQjjoiLCBtdXRhYmxlX3ZhciwgaW1tdXRhYmxlX3ZhcikK" data-runnable="true"></div><p><strong>Python 中的&quot;常量&quot;约定</strong></p><p>虽然 Python 没有<code>const</code>关键字，但社区有明确的约定：使用全大写的变量名来表示常量。这是一种编程约定而非语言强制：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g5bi46YeP55qE57qm5a6a5YaZ5rOVCk1BWF9DT05ORUNUSU9OUyA9IDEwMApQSSA9IDMuMTQxNTkKQVBJX0JBU0VfVVJMID0gImh0dHBzOi8vYXBpLmV4YW1wbGUuY29tIgoKcHJpbnQoZiLmnIDlpKfov57mjqXmlbA6IHtNQVhfQ09OTkVDVElPTlN9IikKcHJpbnQoZiLlnIblkajnjoc6IHtQSX0iKQoKIyDmioDmnK/kuIrku43nhLblj6/ku6Xkv67mlLnvvIzkvYbov53lj43kuobnuqblrpoKIyBNQVhfQ09OTkVDVElPTlMgPSAyMDAgICMg5LiN5o6o6I2Q6L+Z5qC35YGaCg==" data-runnable="true"></div><p>这种约定虽然不如 JavaScript 的<code>const</code>严格，但在实际开发中同样有效。Python 开发者普遍遵循这个约定，代码审查时也会检查这类问题。</p><h2 id="动态类型" tabindex="-1">动态类型 <a class="header-anchor" href="#动态类型" aria-label="Permalink to &quot;动态类型&quot;">​</a></h2><p>JavaScript 和 Python 都是动态类型语言，变量可以在运行时改变类型。但两者在类型处理上有细微差异：</p><div class="interactive-code-block" data-lang="js" data-title="" data-code="bGV0IGR5bmFtaWNWYXIgPSA0MjsKY29uc29sZS5sb2coIuWIneWni+exu+WeizoiLCB0eXBlb2YgZHluYW1pY1Zhcik7CgpkeW5hbWljVmFyID0gIueOsOWcqOaYr+Wtl+espuS4siI7CmNvbnNvbGUubG9nKCLmlrDnsbvlnos6IiwgdHlwZW9mIGR5bmFtaWNWYXIpOwoKZHluYW1pY1ZhciA9IHRydWU7CmNvbnNvbGUubG9nKCLluIPlsJTnsbvlnos6IiwgdHlwZW9mIGR5bmFtaWNWYXIpOwoKZHluYW1pY1ZhciA9IFsxLCAyLCAzXTsKY29uc29sZS5sb2coIuaVsOe7hOexu+WeizoiLCB0eXBlb2YgZHluYW1pY1Zhcik7IC8vIOazqOaEjyBKYXZhU2NyaXB0IOS4reaVsOe7hOS5n+aYryBvYmplY3QK" data-runnable="true"></div><p>Python 的动态类型系统更加直观，<code>type()</code>函数返回的信息更加准确：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="ZHluYW1pY192YXIgPSA0MgpwcmludCgi5Yid5aeL57G75Z6LOiIsIHR5cGUoZHluYW1pY192YXIpKQoKZHluYW1pY192YXIgPSAi546w5Zyo5piv5a2X56ym5LiyIgpwcmludCgi5paw57G75Z6LOiIsIHR5cGUoZHluYW1pY192YXIpKQoKZHluYW1pY192YXIgPSBUcnVlCnByaW50KCLluIPlsJTnsbvlnos6IiwgdHlwZShkeW5hbWljX3ZhcikpCgpkeW5hbWljX3ZhciA9IFsxLCAyLCAzXQpwcmludCgi5YiX6KGo57G75Z6LOiIsIHR5cGUoZHluYW1pY192YXIpKQo=" data-runnable="true"></div><p>Python 的类型检查更加严格，在某些类型转换场景下会抛出错误，而 JavaScript 会进行隐式类型转换：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g5Zyo57G75Z6L5LiN5Yy56YWN5pe25Lya5oql6ZSZ77yM6YG/5YWN5LqG6ZqQ5byP6L2s5o2i55qE6Zm36ZixCnRyeToKICAgIHJlc3VsdCA9ICI1IiArIDMgICMgUHl0aG9uIOS4jeS8muiHquWKqOi9rOaNogpleGNlcHQgVHlwZUVycm9yIGFzIGU6CiAgICBwcmludChmIuexu+Wei+mUmeivrzoge2V9IikKICAgIAojIOmcgOimgeaYvuW8j+i9rOaNogpyZXN1bHQgPSAiNSIgKyBzdHIoMykgICMg5a2X56ym5Liy5ou85o6lCnByaW50KCLlrZfnrKbkuLLmi7zmjqU6IiwgcmVzdWx0KQoKcmVzdWx0ID0gaW50KCI1IikgKyAzICAjIOaVsOWAvOiuoeeulwpwcmludCgi5pWw5YC86K6h566XOiIsIHJlc3VsdCkK" data-runnable="true"></div><p>对比 JavaScript 的隐式转换：</p><div class="interactive-code-block" data-lang="js" data-title="" data-code="Ly8gSmF2YVNjcmlwdCDnmoTpmpDlvI/nsbvlnovovazmjaIKY29uc29sZS5sb2coIjUiICsgMyk7ICAvLyAiNTMiIOWtl+espuS4suaLvOaOpQpjb25zb2xlLmxvZygiNSIgLSAzKTsgIC8vIDIg5pWw5YC86K6h566XCmNvbnNvbGUubG9nKCI1IiAqIDMpOyAgLy8gMTUg5pWw5YC86K6h566XCmNvbnNvbGUubG9nKHRydWUgKyAxKTsgLy8gMiDluIPlsJTlgLzovazmlbDlrZcK" data-runnable="true"></div><p>Python 的这种严格性虽然需要更多的显式转换，但能避免很多 JavaScript 中常见的类型相关 bug。</p><h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><p>JavaScript 社区广泛采用驼峰式命名（camelCase）作为变量命名规范，这已经成为前端开发的标准：</p><div class="interactive-code-block" data-lang="js" data-title="" data-code="Ly8gSmF2YVNjcmlwdCDnmoTpqbzls7DlvI/lkb3lkI0KbGV0IHVzZXJOYW1lID0gIuW8oOS4iSI7CmxldCB1c2VyQWdlID0gMjU7CmxldCBpc0xvZ2dlZEluID0gdHJ1ZTsKbGV0IG1heFJldHJ5Q291bnQgPSAzOwoKY29uc29sZS5sb2codXNlck5hbWUsIHVzZXJBZ2UsIGlzTG9nZ2VkSW4sIG1heFJldHJ5Q291bnQpOwoKLy8g5a+56LGh5bGe5oCn5Lmf5L2/55So6am85bOw5byPCmNvbnN0IHVzZXJJbmZvID0gewogICAgZmlyc3ROYW1lOiAi5LiJIiwKICAgIGxhc3ROYW1lOiAi5bygIiwKICAgIGVtYWlsQWRkcmVzczogInpoYW5nc2FuQGV4YW1wbGUuY29tIgp9OwoKY29uc29sZS5sb2codXNlckluZm8pOwo=" data-runnable="true"></div><p>Python 社区则偏好蛇形式命名（snake_case），这被写入了 PEP 8 官方编码规范中：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g55qE6JuH5b2i5byP5ZG95ZCNCnVzZXJfbmFtZSA9ICLlvKDkuIkiCnVzZXJfYWdlID0gMjUKaXNfbG9nZ2VkX2luID0gVHJ1ZQptYXhfcmV0cnlfY291bnQgPSAzCgpwcmludCh1c2VyX25hbWUsIHVzZXJfYWdlLCBpc19sb2dnZWRfaW4sIG1heF9yZXRyeV9jb3VudCkKCiMg5a2X5YW46ZSu5Lmf6YCa5bi45L2/55So6JuH5b2i5byPCnVzZXJfaW5mbyA9IHsKICAgICJmaXJzdF9uYW1lIjogIuS4iSIsCiAgICAibGFzdF9uYW1lIjogIuW8oCIsIAogICAgImVtYWlsX2FkZHJlc3MiOiAiemhhbmdzYW5AZXhhbXBsZS5jb20iCn0KCnByaW50KHVzZXJfaW5mbykK" data-runnable="true"></div><p><strong>为什么 Python 选择蛇形式？</strong></p><p>Python 选择蛇形式命名的原因与其设计哲学相关：</p><ol><li><strong>可读性</strong>：<code>user_name</code>比<code>userName</code>在视觉上更容易分辨单词边界</li><li><strong>一致性</strong>：Python 标准库大量使用蛇形式，保持一致</li><li><strong>科学计算传统</strong>：Python 在科学计算领域广泛使用，该领域习惯下划线命名</li></ol><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g5Lit55qE5ZCE56eN5ZG95ZCN57qm5a6aCnJlZ3VsYXJfdmFyaWFibGUgPSAi5pmu6YCa5Y+Y6YeP77yM5L2/55So6JuH5b2i5byPIgpDT05TVEFOVF9WQUxVRSA9ICLluLjph4/vvIzkvb/nlKjlhajlpKflhpnliqDkuIvliJLnur8iCl9wcml2YXRlX3ZhciA9ICLnp4HmnInlj5jph4/vvIzliY3nvIDkuIvliJLnur/vvIjnuqblrprvvIkiCl9faW50ZXJuYWxfdmFyID0gIuWGhemDqOWPmOmHj++8jOWPjOS4i+WIkue6v+WJjee8gCIKCmNsYXNzIE15Q2xhc3M6ICAjIOexu+WQjeS9v+eUqOW4leaWr+WNoeWRveWQjeazlQogICAgcGFzcwoKZGVmIG15X2Z1bmN0aW9uKCk6ICAjIOWHveaVsOWQjeS9v+eUqOibh+W9ouW8jwogICAgcGFzcwoKcHJpbnQoIuWRveWQjee6puWumuWxleekuuWujOaIkCIpCg==" data-runnable="true"></div><h2 id="多重赋值" tabindex="-1">多重赋值 <a class="header-anchor" href="#多重赋值" aria-label="Permalink to &quot;多重赋值&quot;">​</a></h2><p>JavaScript 支持解构赋值，这是 ES6 引入的强大特性：</p><div class="interactive-code-block" data-lang="js" data-title="" data-code="Ly8gSmF2YVNjcmlwdCDnmoTop6PmnoTotYvlgLwKY29uc3QgW2EsIGIsIGNdID0gWzEsIDIsIDNdOwpjb25zb2xlLmxvZygi5pWw57uE6Kej5p6EOiIsIGEsIGIsIGMpOwoKY29uc3Qge25hbWUsIGFnZX0gPSB7bmFtZTogIuW8oOS4iSIsIGFnZTogMjV9Owpjb25zb2xlLmxvZygi5a+56LGh6Kej5p6EOiIsIG5hbWUsIGFnZSk7CgovLyDlj5jph4/kuqTmjaIKbGV0IHggPSAxMCwgeSA9IDIwOwpbeCwgeV0gPSBbeSwgeF07CmNvbnNvbGUubG9nKCLkuqTmjaLlkI46IiwgeCwgeSk7CgovLyDlh73mlbDov5Tlm57lpJrkuKrlgLwKZnVuY3Rpb24gZ2V0Q29vcmRpbmF0ZXMoKSB7CiAgICByZXR1cm4gWzEwMCwgMjAwXTsKfQpjb25zdCBbcG9zWCwgcG9zWV0gPSBnZXRDb29yZGluYXRlcygpOwpjb25zb2xlLmxvZygi5Z2Q5qCHOiIsIHBvc1gsIHBvc1kpOwo=" data-runnable="true"></div><p>Python 的多重赋值功能类似但语法更加简洁，这个特性甚至比 JavaScript 的解构赋值出现得更早：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g55qE5aSa6YeN6LWL5YC8CmEsIGIsIGMgPSAxLCAyLCAzCnByaW50KCLlpJrph43otYvlgLw6IiwgYSwgYiwgYykKCiMg5YiX6KGo6Kej5YyFCnZhbHVlcyA9IFsxMCwgMjAsIDMwXQp4LCB5LCB6ID0gdmFsdWVzCnByaW50KCLliJfooajop6PljIU6IiwgeCwgeSwgeikKCiMg5Y+Y6YeP5Lqk5o2i77yIUHl0aG9uIOeahOe7j+WFuOS8mOmbheWGmeazle+8iQp4LCB5ID0gMjAsIDEwCngsIHkgPSB5LCB4CnByaW50KCLkuqTmjaLlkI46IiwgeCwgeSkKCiMg5Ye95pWw6L+U5Zue5aSa5Liq5YC8CmRlZiBnZXRfY29vcmRpbmF0ZXMoKToKICAgIHJldHVybiAxMDAsIDIwMCAgIyDlrp7pmYXov5Tlm57kuIDkuKrlhYPnu4QKCnBvc194LCBwb3NfeSA9IGdldF9jb29yZGluYXRlcygpCnByaW50KCLlnZDmoIc6IiwgcG9zX3gsIHBvc195KQo=" data-runnable="true"></div><p><strong>Python 多重赋值的高级用法</strong></p><p>Python 的多重赋值还支持一些 JavaScript 解构赋值没有的特性：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDlv73nlaXmn5DkupvlgLwKYSwgXywgYyA9IDEsIDIsIDMgICMg5L2/55SoX+W/veeVpeS4jemcgOimgeeahOWAvApwcmludCgi5b+955Wl5Lit6Ze05YC8OiIsIGEsIGMpCgojIOaJqeWxleino+WMhe+8iFB5dGhvbiAzLjAr77yJCmZpcnN0LCAqbWlkZGxlLCBsYXN0ID0gWzEsIDIsIDMsIDQsIDVdCnByaW50KGYi6aaW5bC+5YiG56a7OiDnrKzkuIDkuKo9e2ZpcnN0fSwg5Lit6Ze0PXttaWRkbGV9LCDmnIDlkI49e2xhc3R9IikKCiMg5bWM5aWX6Kej5YyFCm5lc3RlZCA9IFsoMSwgMiksICgzLCA0KV0KKGEsIGIpLCAoYywgZCkgPSBuZXN0ZWQKcHJpbnQoIuW1jOWll+ino+WMhToiLCBhLCBiLCBjLCBkKQoKIyDlrZflhbjpobnop6PljIUKaXRlbXMgPSB7Im5hbWUiOiAi5byg5LiJIiwgImFnZSI6IDI1fS5pdGVtcygpCmZvciBrZXksIHZhbHVlIGluIGl0ZW1zOgogICAgcHJpbnQoZiJ7a2V5fToge3ZhbHVlfSIpCg==" data-runnable="true"></div><h2 id="变量的内存管理" tabindex="-1">变量的内存管理 <a class="header-anchor" href="#变量的内存管理" aria-label="Permalink to &quot;变量的内存管理&quot;">​</a></h2><p>作为前端开发者，你可能很少需要考虑 JavaScript 的内存管理，因为现代 JavaScript 引擎有很好的垃圾回收机制：</p><div class="interactive-code-block" data-lang="js" data-title="" data-code="Ly8gSmF2YVNjcmlwdCDnmoTlhoXlrZjnrqHnkIbpgJrluLjmmK/pgI/mmI7nmoQKbGV0IG9iajEgPSB7bmFtZTogIuW8oOS4iSIsIGRhdGE6IFsxLCAyLCAzXX07CmxldCBvYmoyID0gb2JqMTsgIC8vIOW8leeUqOWQjOS4gOS4quWvueixoQoKY29uc29sZS5sb2coIuWvueixoeW8leeUqDoiLCBvYmoxID09PSBvYmoyKTsgIC8vIHRydWUKCm9iajEgPSBudWxsOyAgLy8g6Kej6Zmk5byV55SoCmNvbnNvbGUubG9nKCJvYmoxOiIsIG9iajEpOwpjb25zb2xlLmxvZygib2JqMiDku43nhLblrZjlnKg6Iiwgb2JqMik7Cg==" data-runnable="true"></div><p>Python 的内存管理也是自动的，但提供了更多的内省能力。Python 内置的<code>id()</code>函数可以返回对象的唯一标识符，通常表示内存地址，这让我们能够观察对象的引用关系。理解 Python 的对象模型有助于编写更高效的代码：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBQeXRob24g55qE5a+56LGh5byV55So5ZKM5YaF5a2Y566h55CGCm9iajEgPSB7Im5hbWUiOiAi5byg5LiJIiwgImRhdGEiOiBbMSwgMiwgM119Cm9iajIgPSBvYmoxICAjIOW8leeUqOWQjOS4gOS4quWvueixoQoKcHJpbnQoIuWvueixoeW8leeUqDoiLCBvYmoxIGlzIG9iajIpICAjIFRydWUKcHJpbnQoIuWvueixoSBJRDoiLCBpZChvYmoxKSwgaWQob2JqMikpICAjIGlkKCkg5pi+56S65YaF5a2Y5Zyw5Z2A77yM55u45ZCM6K+05piO5piv5ZCM5LiA5a+56LGhCgojIFB5dGhvbiDnmoTmlbDlrZfnvJPlrZjmnLrliLYKYSA9IDEwMApiID0gMTAwCnByaW50KCLlsI/mlbTmlbDnvJPlrZg6IiwgYSBpcyBiKSAgIyBUcnVlCnByaW50KCJJRCDlr7nmr5Q6IiwgaWQoYSksIGlkKGIpKSAgIyDlsI/mlbTmlbDkvJrooqvnvJPlrZjvvIxJRCDnm7jlkIwKCmMgPSAxMDAwCmQgPSAxMDAwCnByaW50KCLlpKfmlbTmlbA6IiwgYyBpcyBkKSAgIyDlj6/og73mmK8gRmFsc2UKcHJpbnQoIuWkp+aVtOaVsCBJRDoiLCBpZChjKSwgaWQoZCkpICAjIOWkp+aVtOaVsOavj+asoeWIm+W7uuaWsOWvueixoe+8jElEIOS4jeWQjAo=" data-runnable="true"></div><h2 id="可变与不可变对象" tabindex="-1">可变与不可变对象 <a class="header-anchor" href="#可变与不可变对象" aria-label="Permalink to &quot;可变与不可变对象&quot;">​</a></h2><p>Python 有一个重要概念：可变（mutable）和不可变（immutable）对象。这影响变量赋值的行为：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDkuI3lj6/lj5jlr7nosaHvvJrmlbDlrZfjgIHlrZfnrKbkuLLjgIHlhYPnu4QKeCA9IDQyCnkgPSB4CnggPSAxMDAgICMg5Yib5bu65paw5a+56LGh77yM5LiN5b2x5ZONIHkKcHJpbnQoIuS4jeWPr+WPmOWvueixoToiLCB4LCB5KQoKIyDlj6/lj5jlr7nosaHvvJrliJfooajjgIHlrZflhbjjgIHpm4blkIgKbGlzdDEgPSBbMSwgMiwgM10KbGlzdDIgPSBsaXN0MQpsaXN0MS5hcHBlbmQoNCkgICMg5L+u5pS55Y6f5a+56LGh77yM5b2x5ZONIGxpc3QyCnByaW50KCLlj6/lj5jlr7nosaE6IiwgbGlzdDEsIGxpc3QyKQoKIyDpgb/lhY3ov5nnp43pl67popjnmoTmlrnms5UKbGlzdDMgPSBbMSwgMiwgM10KbGlzdDQgPSBsaXN0My5jb3B5KCkgICMg5oiWIGxpc3Q0ID0gbGlzdDNbOl0KbGlzdDMuYXBwZW5kKDQpCnByaW50KCLlpI3liLblkI46IiwgbGlzdDMsIGxpc3Q0KQo=" data-runnable="true"></div><p>这种设计让 Python 在处理数据时更加明确，避免了 JavaScript 中一些隐式的行为。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>Python 变量管理体现了&quot;简洁胜过复杂&quot;的设计哲学：</p><ol><li><strong>简洁的声明方式</strong>：直接赋值即可创建变量，无需声明关键字</li><li><strong>动态类型特性</strong>：变量可以随时改变类型，提供编程灵活性</li><li><strong>命名规范统一</strong>：使用 snake_case 蛇形式命名，提高代码可读性</li><li><strong>常量约定</strong>：使用全大写表示常量，虽非语言强制但社区广泛遵循</li><li><strong>多重赋值优雅</strong>：支持元组解包、变量交换等高级语法特性</li><li><strong>内存管理透明</strong>：自动垃圾回收，提供 id() 函数查看对象内存地址</li><li><strong>可变性区分</strong>：明确区分可变对象（list、dict）和不可变对象（str、tuple、int）</li></ol><p>掌握 Python 的变量特性，特别是可变性概念，对避免程序中的潜在 bug 非常重要。这些基础概念为后续学习 Python 的高级特性打下了坚实基础。</p><h2 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h2><p>完成以下变量操作任务，输出个人资料信息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=== 个人资料 ===</span></span>
<span class="line"><span>姓名: 李华  </span></span>
<span class="line"><span>年龄: 28 岁</span></span>
<span class="line"><span>邮箱: li.hua@example.com</span></span>
<span class="line"><span>是否VIP: 是</span></span>
<span class="line"><span>爱好: 游泳, 阅读</span></span>
<span class="line"><span>=== 变量演示 ===</span></span>
<span class="line"><span>年龄类型: &lt;class &#39;int&#39;&gt;</span></span>
<span class="line"><span>内存地址: 140xxx</span></span>
<span class="line"><span>年龄+10: 38 岁</span></span></code></pre></div><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDnu5nlrprmlbDmja7vvJrlp5PlkI09IuadjuWNjiIsIOW5tOm+hD0yOCwg6YKu566xPSJsaS5odWFAZXhhbXBsZS5jb20iCgojIDEuIOS9v+eUqOWkmumHjei1i+WAvOWQjOaXtuWIm+W7uuWnk+WQjeOAgeW5tOm+hOOAgemCrueuseS4ieS4quWPmOmHjwoKCiMgMi4g5Yib5bu6IFZJUCDnirbmgIHlj5jph4/vvIjluIPlsJTlgLwgVHJ1Ze+8iQoKCiMgMy4g5Yib5bu654ix5aW95YiX6KGoIFsi5ri45rOzIiwgIumYheivuyJdIAoKCiMgNC4g5L2/55SoIHR5cGUoKSDmo4Dmn6XlubTpvoTnmoTmlbDmja7nsbvlnosKCgojIDUuIOS9v+eUqCBpZCgpIOiOt+WPluWnk+WQjeWPmOmHj+eahOWGheWtmOWcsOWdgAoKCiMgNi4g6K6h566X5bm06b6EKzEw55qE57uT5p6cCgoKIyA3LiDmjInmoLzlvI/ovpPlh7rmiYDmnInkv6Hmga8KCgo=" data-runnable="true"></div><details class="details custom-block"><summary>点击查看参考答案</summary><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyAxLiDkvb/nlKjlpJrph43otYvlgLzlkIzml7bliJvlu7rlp5PlkI3jgIHlubTpvoTjgIHpgq7nrrHkuInkuKrlj5jph48KdXNlcl9uYW1lLCB1c2VyX2FnZSwgdXNlcl9lbWFpbCA9ICLmnY7ljY4iLCAyOCwgImxpLmh1YUBleGFtcGxlLmNvbSIKCiMgMi4g5Yib5bu6IFZJUCDnirbmgIHlj5jph4/vvIjluIPlsJTlgLwgVHJ1Ze+8iQppc192aXAgPSBUcnVlCgojIDMuIOWIm+W7uueIseWlveWIl+ihqApob2JiaWVzID0gWyLmuLjms7MiLCAi6ZiF6K+7Il0KCiMgNC4g5L2/55SoIHR5cGUoKSDmo4Dmn6XlubTpvoTnmoTmlbDmja7nsbvlnosKYWdlX3R5cGUgPSB0eXBlKHVzZXJfYWdlKQoKIyA1LiDkvb/nlKggaWQoKSDojrflj5blp5PlkI3lj5jph4/nmoTlhoXlrZjlnLDlnYAKbmFtZV9pZCA9IGlkKHVzZXJfbmFtZSkKCiMgNi4g6K6h566X5bm06b6EKzEw55qE57uT5p6cCmFnZV9wbHVzXzEwID0gdXNlcl9hZ2UgKyAxMAoKIyA3LiDmjInmoLzlvI/ovpPlh7rmiYDmnInkv6Hmga8KcHJpbnQoIj09PSDkuKrkurrotYTmlpkgPT09IikKcHJpbnQoZiLlp5PlkI06IHt1c2VyX25hbWV9IikKcHJpbnQoZiLlubTpvoQ6IHt1c2VyX2FnZX0g5bKBIikKcHJpbnQoZiLpgq7nrrE6IHt1c2VyX2VtYWlsfSIpCnByaW50KGYi5piv5ZCmVklQOiB7J+aYrycgaWYgaXNfdmlwIGVsc2UgJ+WQpid9IikKcHJpbnQoZiLniLHlpb06IHsnLCAnLmpvaW4oaG9iYmllcyl9IikKcHJpbnQoIj09PSDlj5jph4/mvJTnpLogPT09IikKcHJpbnQoZiLlubTpvoTnsbvlnos6IHthZ2VfdHlwZX0iKQpwcmludChmIuWGheWtmOWcsOWdgDoge25hbWVfaWR9IikKcHJpbnQoZiLlubTpvoQrMTA6IHthZ2VfcGx1c18xMH0g5bKBIikK" data-runnable="true"></div></details>`,57)]))}const m=l(e,[["render",n]]);export{d as __pageData,m as default};
