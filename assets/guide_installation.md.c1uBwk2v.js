import{_ as e,c as t,o as n,ak as l}from"./chunks/framework.CVFSIJ6L.js";const g=JSON.parse('{"title":"环境搭建","description":"","frontmatter":{},"headers":[],"relativePath":"guide/installation.md","filePath":"guide/installation.md"}'),o={name:"guide/installation.md"};function r(i,a,s,d,p,c){return n(),t("div",null,a[0]||(a[0]=[l(`<h1 id="环境搭建" tabindex="-1">环境搭建 <a class="header-anchor" href="#环境搭建" aria-label="Permalink to &quot;环境搭建&quot;">​</a></h1><p>Python 的环境搭建相比 Node.js 来说稍显复杂，但也有相似的地方。作为前端开发者，你已经熟悉了 Node.js 的安装和包管理，Python 的环境配置过程会有很多相似的概念。</p><h2 id="在线环境-推荐" tabindex="-1">在线环境（推荐） <a class="header-anchor" href="#在线环境-推荐" aria-label="Permalink to &quot;在线环境（推荐）&quot;">​</a></h2><p>考虑到环境搭建的复杂性，本教程提供了在线可执行的代码环境，你可以直接在浏览器中运行 Python 代码，无需本地安装，就像在浏览器控制台中写 JavaScript 一样方便。</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyDov5nlsLHmmK/kuIDkuKrlnKjnur8gUHl0aG9uIOeOr+WigwpwcmludCgiSGVsbG8sIFB5dGhvbiEiKQpwcmludCgi5L2g5Y+v5Lul55u05o6l5L+u5pS56L+Z5q615Luj56CB5bm26L+Q6KGMIikKCiMg6K+V6K+V5L+u5pS55LiL6Z2i55qE5Y+Y6YePCm5hbWUgPSAi5YmN56uv5byA5Y+R6ICFIgpwcmludChmIuasoui/jiB7bmFtZX0g5a2m5LmgIFB5dGhvbu+8gSIpCg==" data-runnable="true"></div><div class="tip custom-block"><p class="custom-block-title">在线环境优势</p><ul><li>无需安装配置，开箱即用</li><li>跨平台，任何设备都能学习</li><li>所有代码都可以直接运行和修改</li><li>专注于语言学习，而不是环境问题</li></ul></div><h2 id="python-安装" tabindex="-1">Python 安装 <a class="header-anchor" href="#python-安装" aria-label="Permalink to &quot;Python 安装&quot;">​</a></h2><h3 id="版本选择" tabindex="-1">版本选择 <a class="header-anchor" href="#版本选择" aria-label="Permalink to &quot;版本选择&quot;">​</a></h3><p>JavaScript 开发中，我们通常使用最新的 LTS 版本的 Node.js。Python 也有类似的策略，目前推荐使用 Python 3.9+版本，最新稳定版本是 Python 3.12。</p><div class="tip custom-block"><p class="custom-block-title">版本说明</p><ul><li>Python 2.x 已经停止维护，不要使用</li><li>Python 3.6 以下版本缺少现代特性，不推荐</li><li>Python 3.9+是目前的主流选择，兼容性和功能都比较完善</li></ul></div><h3 id="windows-安装" tabindex="-1">Windows 安装 <a class="header-anchor" href="#windows-安装" aria-label="Permalink to &quot;Windows 安装&quot;">​</a></h3><ol><li>访问 <a href="https://www.python.org/downloads/" target="_blank" rel="noreferrer">Python 官网</a></li><li>下载 Windows 版本的 Python 安装包</li><li>运行安装程序时，<strong>务必勾选&quot;Add Python to PATH&quot;</strong></li><li>选择&quot;Customize installation&quot;进行自定义安装</li><li>在可选功能中，确保勾选 pip、IDLE 等组件</li></ol><h3 id="macos-安装" tabindex="-1">macOS 安装 <a class="header-anchor" href="#macos-安装" aria-label="Permalink to &quot;macOS 安装&quot;">​</a></h3><h4 id="方法一-官方安装包" tabindex="-1">方法一：官方安装包 <a class="header-anchor" href="#方法一-官方安装包" aria-label="Permalink to &quot;方法一：官方安装包&quot;">​</a></h4><p>从 <a href="https://www.python.org/downloads/" target="_blank" rel="noreferrer">Python 官网</a> 下载 macOS 版本，直接安装即可。</p><h4 id="方法二-homebrew-推荐" tabindex="-1">方法二：Homebrew（推荐） <a class="header-anchor" href="#方法二-homebrew-推荐" aria-label="Permalink to &quot;方法二：Homebrew（推荐）&quot;">​</a></h4><p>如果你熟悉前端开发，应该已经在使用 <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a> 了，就像 npm 一样方便：</p><div class="interactive-code-block" data-lang="bash" data-title="" data-code="IyDlronoo4UgUHl0aG9uCmJyZXcgaW5zdGFsbCBweXRob24KCiMg5a6J6KOF5a6M5oiQ5ZCO6aqM6K+BCnB5dGhvbjMgLS12ZXJzaW9uCnBpcDMgLS12ZXJzaW9uCg==" data-runnable="false"></div><h4 id="方法三-pyenv-类似-nvm" tabindex="-1">方法三：pyenv（类似 nvm） <a class="header-anchor" href="#方法三-pyenv-类似-nvm" aria-label="Permalink to &quot;方法三：pyenv（类似 nvm）&quot;">​</a></h4><p>就像 Node.js 有 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer">nvm</a> 来管理多版本，Python 也有 <a href="https://github.com/pyenv/pyenv" target="_blank" rel="noreferrer">pyenv</a>：</p><div class="interactive-code-block" data-lang="bash" data-title="" data-code="IyDlronoo4UgcHllbnYKYnJldyBpbnN0YWxsIHB5ZW52CgojIOWuieijheeJueWumiBQeXRob24g54mI5pysCnB5ZW52IGluc3RhbGwgMy4xMi4wCgojIOiuvue9ruWFqOWxgCBQeXRob24g54mI5pysCnB5ZW52IGdsb2JhbCAzLjEyLjAKCiMg6K6+572u6aG555uu57qnIFB5dGhvbiDniYjmnKwKcHllbnYgbG9jYWwgMy4xMS4wCg==" data-runnable="false"></div><h2 id="验证安装" tabindex="-1">验证安装 <a class="header-anchor" href="#验证安装" aria-label="Permalink to &quot;验证安装&quot;">​</a></h2><p>安装完成后，打开终端（Command Prompt、PowerShell 或 Terminal）验证：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="aW1wb3J0IHN5cwpwcmludChmIlB5dGhvbiDniYjmnKw6IHtzeXMudmVyc2lvbn0iKQpwcmludChmIlB5dGhvbiDot6/lvoQ6IHtzeXMuZXhlY3V0YWJsZX0iKQo=" data-runnable="true"></div><p>在命令行中也可以验证：</p><div class="interactive-code-block" data-lang="bash" data-title="" data-code="cHl0aG9uIC0tdmVyc2lvbgojIOaIluiAhQpweXRob24zIC0tdmVyc2lvbgoKcGlwIC0tdmVyc2lvbgojIOaIluiAhQpwaXAzIC0tdmVyc2lvbgo=" data-runnable="false"></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>在某些系统中，<code>python</code>命令可能指向 Python 2.x，而<code>python3</code>才是 Python 3.x。建议使用<code>python3</code>命令，或者配置别名。</p></div><h2 id="包管理器" tabindex="-1">包管理器 <a class="header-anchor" href="#包管理器" aria-label="Permalink to &quot;包管理器&quot;">​</a></h2><h3 id="pip-vs-npm" tabindex="-1">pip vs npm <a class="header-anchor" href="#pip-vs-npm" aria-label="Permalink to &quot;pip vs npm&quot;">​</a></h3><p>JavaScript 有 npm/yarn/pnpm，Python 有 pip 作为默认包管理器。但在依赖管理机制上有重要差异：</p><table tabindex="0"><thead><tr><th>功能</th><th>JavaScript</th><th>Python</th></tr></thead><tbody><tr><td>项目依赖安装</td><td><code>npm install package</code></td><td><code>pip install package</code>（需在虚拟环境中）</td></tr><tr><td>安装指定版本</td><td><code>npm install package@2.28.0</code></td><td><code>pip install package==2.28.0</code></td></tr><tr><td>更新包</td><td><code>npm update package</code></td><td><code>pip install package --upgrade</code></td></tr><tr><td>全局安装</td><td><code>npm install -g package</code></td><td><code>pip install package</code>（系统级安装）</td></tr><tr><td>卸载包</td><td><code>npm uninstall package</code></td><td><code>pip uninstall package</code></td></tr><tr><td>查看已安装包</td><td><code>npm list</code></td><td><code>pip list</code></td></tr><tr><td>查看包信息</td><td><code>npm info package</code></td><td><code>pip show package</code></td></tr><tr><td>依赖文件</td><td><code>package.json</code></td><td><code>requirements.txt</code></td></tr><tr><td>导出依赖</td><td>自动生成</td><td><code>pip freeze &gt; requirements.txt</code></td></tr><tr><td>安装依赖</td><td><code>npm install</code></td><td><code>pip install -r requirements.txt</code></td></tr><tr><td>锁定文件</td><td><code>package-lock.json</code></td><td><a href="https://pip-tools.readthedocs.io/" target="_blank" rel="noreferrer">pip-tools</a> 生成</td></tr><tr><td>开发依赖</td><td><code>npm install -D package</code></td><td><code>pip install package</code>（需手动区分）</td></tr></tbody></table><h3 id="重要差异-依赖管理机制" tabindex="-1">重要差异：依赖管理机制 <a class="header-anchor" href="#重要差异-依赖管理机制" aria-label="Permalink to &quot;重要差异：依赖管理机制&quot;">​</a></h3><p>这是 Python 和 JavaScript 最大的区别之一：</p><p><strong>JavaScript（npm）</strong>：</p><ul><li>每个项目自动拥有独立的<code>node_modules</code>目录</li><li>依赖默认安装在项目级别，自然隔离</li><li>全局安装需要<code>-g</code>参数</li></ul><p><strong>Python（pip）</strong>：</p><ul><li>pip 默认安装到系统级 Python 环境</li><li>需要手动创建虚拟环境来实现项目级依赖隔离</li><li>虚拟环境激活后，pip 行为类似 npm 的项目级安装</li></ul><h2 id="虚拟环境详解" tabindex="-1">虚拟环境详解 <a class="header-anchor" href="#虚拟环境详解" aria-label="Permalink to &quot;虚拟环境详解&quot;">​</a></h2><h3 id="为什么需要虚拟环境" tabindex="-1">为什么需要虚拟环境 <a class="header-anchor" href="#为什么需要虚拟环境" aria-label="Permalink to &quot;为什么需要虚拟环境&quot;">​</a></h3><p>在 Node.js 开发中，每个项目都有自己的<code>node_modules</code>目录，包依赖是项目级别的，天然隔离。Python 默认是全局安装包，这可能导致版本冲突问题。</p><p><strong>举个例子</strong>：</p><ul><li>项目 A 需要 Django 3.2</li><li>项目 B 需要 Django 4.0</li><li>如果全局安装，只能保留一个版本</li></ul><p>虚拟环境就是 Python 解决这个问题的方案，它为每个项目创建独立的 Python 环境，类似于给每个项目一个独立的&quot;node_modules&quot;。</p><h3 id="venv-推荐" tabindex="-1">venv（推荐） <a class="header-anchor" href="#venv-推荐" aria-label="Permalink to &quot;venv（推荐）&quot;">​</a></h3><p>Python 3.3+内置了 venv 模块：</p><div class="interactive-code-block" data-lang="bash" data-title="" data-code="IyDliJvlu7romZrmi5/njq/looMKcHl0aG9uIC1tIHZlbnYgbXlwcm9qZWN0CgojIOa/gOa0u+iZmuaLn+eOr+WigwojIFdpbmRvd3MKbXlwcm9qZWN0XFNjcmlwdHNcYWN0aXZhdGUKIyBtYWNPUy9MaW51eApzb3VyY2UgbXlwcm9qZWN0L2Jpbi9hY3RpdmF0ZQoKIyDlgZznlKjomZrmi5/njq/looMKZGVhY3RpdmF0ZQo=" data-runnable="false"></div><h3 id="virtualenv" tabindex="-1">virtualenv <a class="header-anchor" href="#virtualenv" aria-label="Permalink to &quot;virtualenv&quot;">​</a></h3><p><a href="https://virtualenv.pypa.io/" target="_blank" rel="noreferrer">virtualenv</a> 是第三方工具，功能更丰富：</p><div class="interactive-code-block" data-lang="bash" data-title="" data-code="IyDlronoo4UgdmlydHVhbGVudgpwaXAgaW5zdGFsbCB2aXJ0dWFsZW52CgojIOWIm+W7uuiZmuaLn+eOr+Wigwp2aXJ0dWFsZW52IG15cHJvamVjdAoKIyDmv4DmtLvmlrnlvI/lkIwgdmVudgo=" data-runnable="false"></div><h3 id="conda" tabindex="-1">conda <a class="header-anchor" href="#conda" aria-label="Permalink to &quot;conda&quot;">​</a></h3><p><a href="https://www.anaconda.com/" target="_blank" rel="noreferrer">Anaconda</a>/<a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noreferrer">Miniconda</a> 提供的环境管理工具，特别适合数据科学：</p><div class="interactive-code-block" data-lang="bash" data-title="" data-code="IyDliJvlu7rnjq/looMKY29uZGEgY3JlYXRlIC1uIG15cHJvamVjdCBweXRob249My4xMgoKIyDmv4DmtLvnjq/looMKY29uZGEgYWN0aXZhdGUgbXlwcm9qZWN0CgojIOWBnOeUqOeOr+Wigwpjb25kYSBkZWFjdGl2YXRlCg==" data-runnable="false"></div><h2 id="开发环境选择" tabindex="-1">开发环境选择 <a class="header-anchor" href="#开发环境选择" aria-label="Permalink to &quot;开发环境选择&quot;">​</a></h2><h3 id="ide-编辑器" tabindex="-1">IDE/编辑器 <a class="header-anchor" href="#ide-编辑器" aria-label="Permalink to &quot;IDE/编辑器&quot;">​</a></h3><p>作为前端开发者，你应该已经在使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VS Code</a> 了，它对 Python 也有很好的支持：</p><h4 id="vs-code-推荐" tabindex="-1">VS Code（推荐） <a class="header-anchor" href="#vs-code-推荐" aria-label="Permalink to &quot;VS Code（推荐）&quot;">​</a></h4><ol><li>安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noreferrer">Python 扩展包</a>（Microsoft 官方）</li><li>安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance" target="_blank" rel="noreferrer">Pylance</a>（更好的语言支持）</li><li>可选安装 <a href="https://black.readthedocs.io/" target="_blank" rel="noreferrer">Black</a>（代码格式化）、<a href="https://flake8.pycqa.org/" target="_blank" rel="noreferrer">Flake8</a>（代码检查）</li></ol><p>VS Code 的 Python 开发体验和 JavaScript 开发类似，有智能提示、调试、集成终端等功能。</p><h4 id="pycharm" tabindex="-1"><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noreferrer">PyCharm</a> <a class="header-anchor" href="#pycharm" aria-label="Permalink to &quot;[PyCharm](https://www.jetbrains.com/pycharm/)&quot;">​</a></h4><p>JetBrains 出品的专业 Python IDE，功能强大但相对重量级，适合大型项目。</p><h4 id="jupyter-notebook" tabindex="-1"><a href="https://jupyter.org/" target="_blank" rel="noreferrer">Jupyter Notebook</a> <a class="header-anchor" href="#jupyter-notebook" aria-label="Permalink to &quot;[Jupyter Notebook](https://jupyter.org/)&quot;">​</a></h4><p>Jupyter Notebook 特别适合数据分析和学习，类似于在线的交互式环境。</p><div class="interactive-code-block" data-lang="bash" data-title="" data-code="IyDlronoo4UgSnVweXRlcgpwaXAgaW5zdGFsbCBqdXB5dGVyCgojIOWQr+WKqCBKdXB5dGVyIE5vdGVib29rCmp1cHl0ZXIgbm90ZWJvb2sK" data-runnable="false"></div><h3 id="代码格式化和检查" tabindex="-1">代码格式化和检查 <a class="header-anchor" href="#代码格式化和检查" aria-label="Permalink to &quot;代码格式化和检查&quot;">​</a></h3><p>JavaScript 项目中我们使用 <a href="https://prettier.io/" target="_blank" rel="noreferrer">Prettier</a>、<a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a>，Python 也有对应的工具：</p><p><strong>代码格式化：<a href="https://black.readthedocs.io/" target="_blank" rel="noreferrer">Black</a></strong><br> Black 是 Python 的代码格式化工具，类似于 Prettier。它的特点是&quot;零配置&quot;，强制统一的代码风格，被称为&quot;不妥协的代码格式化工具&quot;。</p><p><strong>代码检查：<a href="https://flake8.pycqa.org/" target="_blank" rel="noreferrer">Flake8</a></strong><br> Flake8 是 Python 的代码检查工具，类似于 ESLint。它检查代码风格、语法错误和复杂度问题，帮助保持代码质量。</p><p><strong>静态类型检查：<a href="https://mypy.readthedocs.io/" target="_blank" rel="noreferrer">mypy</a></strong><br> mypy 是 Python 的静态类型检查器，类似于 TypeScript 的类型检查功能。虽然 Python 是动态类型语言，但通过类型注解可以享受静态类型检查的好处。</p><div class="interactive-code-block" data-lang="bash" data-title="" data-code="IyDlronoo4Xku6PnoIHmoLzlvI/ljJblt6XlhbcKcGlwIGluc3RhbGwgYmxhY2sKCiMg5a6J6KOF5Luj56CB5qOA5p+l5bel5YW3CnBpcCBpbnN0YWxsIGZsYWtlOAoKIyDlronoo4Xnsbvlnovmo4Dmn6Xlt6XlhbcKcGlwIGluc3RhbGwgbXlweQo=" data-runnable="false"></div><p>在 VS Code 中配置自动格式化（类似配置 Prettier 和 ESLint）：</p><p><strong>方法一：全局配置</strong></p><ol><li>按<code>Ctrl+Shift+P</code>（macOS: <code>Cmd+Shift+P</code>）打开命令面板</li><li>输入&quot;Preferences: Open Settings (JSON)&quot;</li><li>在<code>settings.json</code>文件中添加以下配置：</li></ol><div class="interactive-code-block" data-lang="json" data-title="" data-code="ewogICAgInB5dGhvbi5mb3JtYXR0aW5nLnByb3ZpZGVyIjogImJsYWNrIiwKICAgICJweXRob24ubGludGluZy5lbmFibGVkIjogdHJ1ZSwKICAgICJweXRob24ubGludGluZy5mbGFrZThFbmFibGVkIjogdHJ1ZSwKICAgICJlZGl0b3IuZm9ybWF0T25TYXZlIjogdHJ1ZQp9Cg==" data-runnable="false"></div><p><strong>方法二：项目级配置</strong></p><p>在项目根目录创建<code>.vscode/settings.json</code>文件，添加相同配置（推荐，类似<code>.eslintrc.js</code>的项目级配置）。</p><h2 id="项目结构详解" tabindex="-1">项目结构详解 <a class="header-anchor" href="#项目结构详解" aria-label="Permalink to &quot;项目结构详解&quot;">​</a></h2><p>Python 项目的典型结构和 Node.js 项目有相似之处，但也有一些 Python 特有的文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my-python-project/</span></span>
<span class="line"><span>├── src/                    # 源代码目录</span></span>
<span class="line"><span>│   ├── __init__.py        # 包标识文件（Python 特有）</span></span>
<span class="line"><span>│   ├── main.py            # 主程序入口</span></span>
<span class="line"><span>│   └── utils/             # 工具模块</span></span>
<span class="line"><span>│       ├── __init__.py</span></span>
<span class="line"><span>│       └── helpers.py</span></span>
<span class="line"><span>├── tests/                  # 测试文件目录</span></span>
<span class="line"><span>│   ├── __init__.py</span></span>
<span class="line"><span>│   └── test_main.py</span></span>
<span class="line"><span>├── requirements.txt        # 项目依赖列表</span></span>
<span class="line"><span>├── setup.py               # 包发布配置（可选）</span></span>
<span class="line"><span>├── pyproject.toml         # 现代 Python 项目配置（推荐）</span></span>
<span class="line"><span>├── README.md              # 项目说明</span></span>
<span class="line"><span>├── .gitignore             # Git 忽略文件</span></span>
<span class="line"><span>├── .env                   # 环境变量文件</span></span>
<span class="line"><span>└── venv/                  # 虚拟环境目录（通常加入.gitignore）</span></span></code></pre></div><h3 id="文件作用详解" tabindex="-1">文件作用详解 <a class="header-anchor" href="#文件作用详解" aria-label="Permalink to &quot;文件作用详解&quot;">​</a></h3><h4 id="init-py-包标识文件-python-特有" tabindex="-1"><code>__init__.py</code> - 包标识文件（Python 特有） <a class="header-anchor" href="#init-py-包标识文件-python-特有" aria-label="Permalink to &quot;\`__init__.py\` - 包标识文件（Python 特有）&quot;">​</a></h4><p>JavaScript 中，任何包含文件的目录都可以被导入。Python 需要<code>__init__.py</code>文件来标识目录为包：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBzcmMvX19pbml0X18ucHkgLSDlj6/ku6XkuLrnqbrvvIzmiJbogIXljIXlkKvljIXnuqfliKvnmoTliJ3lp4vljJbku6PnoIEKX192ZXJzaW9uX18gPSAiMS4wLjAiCl9fYXV0aG9yX18gPSAiWW91ciBOYW1lIgoKIyDlr7zlh7rkuLvopoHmjqXlj6PvvIjnsbvkvLzkuo4gaW5kZXguanMg55qE5L2c55So77yJCmZyb20gLm1haW4gaW1wb3J0IG1haW5fZnVuY3Rpb24KZnJvbSAudXRpbHMuaGVscGVycyBpbXBvcnQgaGVscGVyX2Z1bmN0aW9uCg==" data-runnable="false"></div><p>这相当于 Node.js 中的<code>index.js</code>文件，用于定义包的对外接口。</p><h4 id="requirements-txt-依赖管理" tabindex="-1"><code>requirements.txt</code> - 依赖管理 <a class="header-anchor" href="#requirements-txt-依赖管理" aria-label="Permalink to &quot;\`requirements.txt\` - 依赖管理&quot;">​</a></h4><p>相当于 JavaScript 的<code>package.json</code>中的 dependencies 部分：</p><div class="interactive-code-block" data-lang="txt" data-title="" data-code="IyByZXF1aXJlbWVudHMudHh0CnJlcXVlc3RzPj0yLjI4LjAKZmxhc2s9PTIuMC4xCnB5dGVzdD49Ny4wLjAK" data-runnable="false"></div><p>对比 JavaScript 的依赖声明：</p><div class="interactive-code-block" data-lang="json" data-title="" data-code="ewogICJkZXBlbmRlbmNpZXMiOiB7CiAgICAiZXhwcmVzcyI6ICJeNC4xOC4wIiwKICAgICJheGlvcyI6ICI+PTAuMjcuMCIKICB9Cn0K" data-runnable="false"></div><h4 id="setup-py-包发布配置" tabindex="-1"><code>setup.py</code> - 包发布配置 <a class="header-anchor" href="#setup-py-包发布配置" aria-label="Permalink to &quot;\`setup.py\` - 包发布配置&quot;">​</a></h4><p>类似于<code>package.json</code>的元数据和发布配置部分，用于将 Python 项目打包发布到 <a href="https://pypi.org/" target="_blank" rel="noreferrer">PyPI</a>（Python 的 npm registry）：</p><div class="interactive-code-block" data-lang="py" data-title="" data-code="IyBzZXR1cC5weQpmcm9tIHNldHVwdG9vbHMgaW1wb3J0IHNldHVwLCBmaW5kX3BhY2thZ2VzCgpzZXR1cCgKICAgIG5hbWU9Im15LXB5dGhvbi1wcm9qZWN0IiwgICAgICAgICAgICMg5YyF5ZCN77yI57G75Ly8IHBhY2thZ2UuanNvbiDnmoQgbmFtZe+8iQogICAgdmVyc2lvbj0iMS4wLjAiLCAgICAgICAgICAgICAgICAgICAgIyDniYjmnKzlj7cKICAgIGF1dGhvcj0iWW91ciBOYW1lIiwgICAgICAgICAgICAgICAgICMg5L2c6ICFCiAgICBhdXRob3JfZW1haWw9InlvdXIuZW1haWxAZXhhbXBsZS5jb20iLAogICAgZGVzY3JpcHRpb249IkEgc2FtcGxlIFB5dGhvbiBwYWNrYWdlIiwKICAgIGxvbmdfZGVzY3JpcHRpb249b3BlbigiUkVBRE1FLm1kIikucmVhZCgpLAogICAgbG9uZ19kZXNjcmlwdGlvbl9jb250ZW50X3R5cGU9InRleHQvbWFya2Rvd24iLAogICAgdXJsPSJodHRwczovL2dpdGh1Yi5jb20vdXNlcm5hbWUvbXktcHl0aG9uLXByb2plY3QiLAogICAgcGFja2FnZXM9ZmluZF9wYWNrYWdlcygpLCAgICAgICAgICAgIyDoh6rliqjlj5HnjrDljIUKICAgIGNsYXNzaWZpZXJzPVsgICAgICAgICAgICAgICAgICAgICAgICMg5YyF5YiG57G75L+h5oGvCiAgICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiwKICAgICAgICAiTGljZW5zZSA6OiBPU0kgQXBwcm92ZWQgOjogTUlUIExpY2Vuc2UiLAogICAgICAgICJPcGVyYXRpbmcgU3lzdGVtIDo6IE9TIEluZGVwZW5kZW50IiwKICAgIF0sCiAgICBweXRob25fcmVxdWlyZXM9Ij49My45IiwgICAgICAgICAgICAjIFB5dGhvbiDniYjmnKzopoHmsYIKICAgIGluc3RhbGxfcmVxdWlyZXM9WyAgICAgICAgICAgICAgICAgICMg6L+Q6KGM5pe25L6d6LWWCiAgICAgICAgInJlcXVlc3RzPj0yLjI4LjAiLAogICAgICAgICJmbGFzaz49Mi4wLjAiLAogICAgXSwKICAgIGV4dHJhc19yZXF1aXJlPXsgICAgICAgICAgICAgICAgICAgICMg5Y+v6YCJ5L6d6LWW77yI57G75Ly8IHBlZXJEZXBlbmRlbmNpZXPvvIkKICAgICAgICAiZGV2IjogWyJweXRlc3Q+PTcuMC4wIiwgImJsYWNrIiwgImZsYWtlOCJdLAogICAgfSwKICAgIGVudHJ5X3BvaW50cz17ICAgICAgICAgICAgICAgICAgICAgICMg5ZG95Luk6KGM5YWl5Y+j77yI57G75Ly8IHBhY2thZ2UuanNvbiDnmoQgYmlu77yJCiAgICAgICAgImNvbnNvbGVfc2NyaXB0cyI6IFsKICAgICAgICAgICAgIm15LXRvb2w9c3JjLm1haW46bWFpbiIsCiAgICAgICAgXSwKICAgIH0sCikK" data-runnable="false"></div><h4 id="pyproject-toml-现代项目配置-推荐" tabindex="-1"><code>pyproject.toml</code> - 现代项目配置（推荐） <a class="header-anchor" href="#pyproject-toml-现代项目配置-推荐" aria-label="Permalink to &quot;\`pyproject.toml\` - 现代项目配置（推荐）&quot;">​</a></h4><p>新的 Python 项目标准，相当于更现代的<code>package.json</code>：</p><div class="interactive-code-block" data-lang="toml" data-title="" data-code="W2J1aWxkLXN5c3RlbV0KcmVxdWlyZXMgPSBbInNldHVwdG9vbHM+PTYxLjAiLCAid2hlZWwiXQpidWlsZC1iYWNrZW5kID0gInNldHVwdG9vbHMuYnVpbGRfbWV0YSIKCltwcm9qZWN0XQpuYW1lID0gIm15LXB5dGhvbi1wcm9qZWN0Igp2ZXJzaW9uID0gIjEuMC4wIgphdXRob3JzID0gWwogICAge25hbWUgPSAiWW91ciBOYW1lIiwgZW1haWwgPSAieW91ci5lbWFpbEBleGFtcGxlLmNvbSJ9LApdCmRlc2NyaXB0aW9uID0gIkEgc2FtcGxlIFB5dGhvbiBwYWNrYWdlIgpyZWFkbWUgPSAiUkVBRE1FLm1kIgpyZXF1aXJlcy1weXRob24gPSAiPj0zLjkiCmNsYXNzaWZpZXJzID0gWwogICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiwKICAgICJMaWNlbnNlIDo6IE9TSSBBcHByb3ZlZCA6OiBNSVQgTGljZW5zZSIsCiAgICAiT3BlcmF0aW5nIFN5c3RlbSA6OiBPUyBJbmRlcGVuZGVudCIsCl0KZGVwZW5kZW5jaWVzID0gWwogICAgInJlcXVlc3RzPj0yLjI4LjAiLAogICAgImZsYXNrPj0yLjAuMCIsCl0KCltwcm9qZWN0Lm9wdGlvbmFsLWRlcGVuZGVuY2llc10KZGV2ID0gWyJweXRlc3Q+PTcuMC4wIiwgImJsYWNrIiwgImZsYWtlOCJdCgpbcHJvamVjdC5zY3JpcHRzXQpteS10b29sID0gInNyYy5tYWluOm1haW4iCg==" data-runnable="false"></div><h3 id="项目类型对比" tabindex="-1">项目类型对比 <a class="header-anchor" href="#项目类型对比" aria-label="Permalink to &quot;项目类型对比&quot;">​</a></h3><h4 id="简单脚本项目" tabindex="-1">简单脚本项目 <a class="header-anchor" href="#简单脚本项目" aria-label="Permalink to &quot;简单脚本项目&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>script-project/</span></span>
<span class="line"><span>├── main.py</span></span>
<span class="line"><span>├── requirements.txt</span></span>
<span class="line"><span>└── README.md</span></span></code></pre></div><h4 id="可安装包项目" tabindex="-1">可安装包项目 <a class="header-anchor" href="#可安装包项目" aria-label="Permalink to &quot;可安装包项目&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package-project/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   └── mypackage/</span></span>
<span class="line"><span>│       ├── __init__.py</span></span>
<span class="line"><span>│       └── main.py</span></span>
<span class="line"><span>├── tests/</span></span>
<span class="line"><span>├── setup.py 或 pyproject.toml</span></span>
<span class="line"><span>├── requirements.txt</span></span>
<span class="line"><span>└── README.md</span></span></code></pre></div><h4 id="web-应用项目" tabindex="-1">Web 应用项目 <a class="header-anchor" href="#web-应用项目" aria-label="Permalink to &quot;Web 应用项目&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>web-app/</span></span>
<span class="line"><span>├── app/</span></span>
<span class="line"><span>│   ├── __init__.py</span></span>
<span class="line"><span>│   ├── main.py</span></span>
<span class="line"><span>│   ├── models/</span></span>
<span class="line"><span>│   ├── views/</span></span>
<span class="line"><span>│   └── templates/</span></span>
<span class="line"><span>├── static/</span></span>
<span class="line"><span>├── requirements.txt</span></span>
<span class="line"><span>├── .env</span></span>
<span class="line"><span>└── README.md</span></span></code></pre></div><h3 id="开发工作流对比" tabindex="-1">开发工作流对比 <a class="header-anchor" href="#开发工作流对比" aria-label="Permalink to &quot;开发工作流对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th>阶段</th><th>JavaScript</th><th>Python</th></tr></thead><tbody><tr><td>初始化项目</td><td><code>npm init</code></td><td><code>mkdir project &amp;&amp; cd project</code></td></tr><tr><td>创建虚拟环境</td><td>自动（node_modules）</td><td><code>python -m venv venv</code></td></tr><tr><td>激活环境</td><td>无需操作</td><td><code>source venv/bin/activate</code></td></tr><tr><td>安装依赖</td><td><code>npm install</code></td><td><code>pip install -r requirements.txt</code></td></tr><tr><td>添加依赖</td><td><code>npm install package</code></td><td><code>pip install package &amp;&amp; pip freeze &gt; requirements.txt</code></td></tr><tr><td>运行项目</td><td><code>npm start</code></td><td><code>python main.py</code></td></tr><tr><td>发布包</td><td><code>npm publish</code></td><td><code>python setup.py sdist bdist_wheel &amp;&amp; twine upload dist/*</code></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">相关链接</p><ul><li><a href="https://setuptools.pypa.io/" target="_blank" rel="noreferrer">setuptools 文档</a> - Python 包构建工具</li><li><a href="https://twine.readthedocs.io/" target="_blank" rel="noreferrer">twine</a> - 用于上传 Python 包到 PyPI</li><li><a href="https://pip-tools.readthedocs.io/" target="_blank" rel="noreferrer">pip-tools</a> - 用于生成锁定文件</li><li><a href="https://mypy.readthedocs.io/" target="_blank" rel="noreferrer">mypy</a> - Python 静态类型检查器</li></ul></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>Python 的环境搭建相比 Node.js 稍显复杂，但概念很相似。主要差异包括：</p><ul><li><strong>版本管理</strong>：Python 有 pyenv（类似 nvm），用于管理多个 Python 版本</li><li><strong>包管理</strong>：pip 是默认选择（类似 npm），但没有内置的锁定文件机制</li><li><strong>虚拟环境</strong>：Python 需要手动创建项目级依赖隔离（Node.js 的 node_modules 是自动的）</li><li><strong>开发工具</strong>：VS Code 对 Python 支持很好，配置方式和 JavaScript 项目类似</li></ul><p>对于学习阶段，推荐使用本教程提供的在线环境，可以跳过复杂的配置过程，专注于 Python 语言本身的学习。当你需要开发实际项目时，再根据项目需求搭建本地开发环境。</p><h2 id="快速参考链接" tabindex="-1">快速参考链接 <a class="header-anchor" href="#快速参考链接" aria-label="Permalink to &quot;快速参考链接&quot;">​</a></h2><h3 id="官方资源" tabindex="-1">官方资源 <a class="header-anchor" href="#官方资源" aria-label="Permalink to &quot;官方资源&quot;">​</a></h3><ul><li><a href="https://www.python.org/" target="_blank" rel="noreferrer">Python 官网</a> - Python 官方网站</li><li><a href="https://docs.python.org/3/" target="_blank" rel="noreferrer">Python 文档</a> - 官方文档</li><li><a href="https://pypi.org/" target="_blank" rel="noreferrer">PyPI</a> - Python 包索引（类似 npm registry）</li><li><a href="https://pep8.org/" target="_blank" rel="noreferrer">PEP 8</a> - Python 代码风格指南</li></ul><h3 id="开发工具" tabindex="-1">开发工具 <a class="header-anchor" href="#开发工具" aria-label="Permalink to &quot;开发工具&quot;">​</a></h3><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VS Code</a> - 微软开源编辑器 <ul><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noreferrer">Python 扩展</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance" target="_blank" rel="noreferrer">Pylance</a></li></ul></li><li><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noreferrer">PyCharm</a> - JetBrains 专业 IDE</li><li><a href="https://jupyter.org/" target="_blank" rel="noreferrer">Jupyter</a> - 交互式开发环境</li></ul><h3 id="包管理和环境" tabindex="-1">包管理和环境 <a class="header-anchor" href="#包管理和环境" aria-label="Permalink to &quot;包管理和环境&quot;">​</a></h3><ul><li><a href="https://pip.pypa.io/" target="_blank" rel="noreferrer">pip 文档</a> - Python 包管理器</li><li><a href="https://virtualenv.pypa.io/" target="_blank" rel="noreferrer">virtualenv</a> - 虚拟环境工具</li><li><a href="https://github.com/pyenv/pyenv" target="_blank" rel="noreferrer">pyenv</a> - Python 版本管理</li><li><a href="https://www.anaconda.com/" target="_blank" rel="noreferrer">Anaconda</a> - 数据科学 Python 发行版</li></ul><h3 id="代码质量工具" tabindex="-1">代码质量工具 <a class="header-anchor" href="#代码质量工具" aria-label="Permalink to &quot;代码质量工具&quot;">​</a></h3><ul><li><a href="https://black.readthedocs.io/" target="_blank" rel="noreferrer">Black</a> - 代码格式化</li><li><a href="https://flake8.pycqa.org/" target="_blank" rel="noreferrer">Flake8</a> - 代码检查</li><li><a href="https://mypy.readthedocs.io/" target="_blank" rel="noreferrer">mypy</a> - 静态类型检查</li><li><a href="https://pytest.org/" target="_blank" rel="noreferrer">pytest</a> - 测试框架</li></ul>`,117)]))}const b=e(o,[["render",r]]);export{g as __pageData,b as default};
